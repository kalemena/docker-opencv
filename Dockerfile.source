FROM ubuntu:20.04

# Build-time metadata as defined at http://label-schema.org
ARG BUILD_DATE
ARG VCS_REF
ARG VERSION
LABEL org.label-schema.build-date=$BUILD_DATE \
      org.label-schema.name="Kalemena OpenCV" \
      org.label-schema.description="Kalemena OpenCV" \
      org.label-schema.url="private" \
      org.label-schema.vcs-ref=$VCS_REF \
      org.label-schema.vcs-url="https://github.com/kalemena/docker-opencv" \
      org.label-schema.vendor="Kalemena" \
      org.label-schema.version=$VERSION \
      org.label-schema.schema-version="1.0"

ENV DEBIAN_FRONTEND=noninteractive
ENV LC_ALL en_US.UTF-8
ENV LANG en_US.UTF-8

# https://docs.opencv.org/3.4.1/d2/de6/tutorial_py_setup_in_ubuntu.html
# https://github.com/milq/milq/blob/master/scripts/bash/install-opencv.sh
RUN apt-get update -y; \
    apt-get upgrade -y; \
	apt-get install -yq --no-install-recommends \
        build-essential \
        cmake \
        tzdata \
        unzip \
        wget \
        qt5-default libvtk6-dev \
        zlib1g-dev libjpeg-dev libwebp-dev libpng-dev libtiff5-dev libopenexr-dev libgdal-dev \
        libdc1394-22-dev libavcodec-dev libavformat-dev libswscale-dev libtheora-dev libvorbis-dev libxvidcore-dev \
        libx264-dev yasm libopencore-amrnb-dev libopencore-amrwb-dev libv4l-dev libxine2-dev \
        libtbb-dev libeigen3-dev \
        python3-dev python3-tk python3-pip python3-setuptools \
        default-jdk \
        doxygen \
        pandoc; \
    apt-get clean; \
 	rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*;

# libsm6
# libxext-dev
# libxrender1
# lmodern
# pkg-config
# libtbb2
# libjasper-dev
# libpq-dev
# libgstreamer1.0-dev libgstreamer-plugins-base1.0-dev
# libgtk2.0-dev libtbb-dev qt5-default
# libatlas-base-dev
# libfaac-dev libmp3lame-dev
# libavresample-dev
# x264 v4l-utils
# libprotobuf-dev protobuf-compiler
# libgoogle-glog-dev libgflags-dev
# libgphoto2-dev libhdf5-dev doxygen
# python3-testresources

# add-apt-repository "deb http://security.ubuntu.com/ubuntu xenial-security main"
# libjasper1 libtiff-dev
# x264 gtk2-devel ffmpeg-devel gstreamer-plugins-base-devel jasper-devel;
# checkinstall pkg-config yasm libjpeg8-dev
# git gfortran software-properties-common
# cd /usr/include/linux
# sudo ln -s -f ../libv4l1-videodev.h videodev.h

RUN pip3 --no-cache-dir install wheel numpy scipy matplotlib scikit-image scikit-learn ipython dlib;
RUN pip3 --no-cache-dir install pillow jupyterlab tensorflow;

# libjasper-dev
# RUN git clone https://github.com/jasperproject/jasper-client.git jasper && \
#  		chmod +x jasper/jasper.py && \
# 		pip install --upgrade setuptools && \ 
# 		pip install -r jasper/client/requirements.txt

WORKDIR /opt

RUN wget https://github.com/opencv/opencv_contrib/archive/${VERSION}.zip; \
    unzip ${VERSION}.zip; \
    rm ${VERSION}.zip; \
    mv opencv_contrib-${VERSION} /opt/opencv_contrib;
    
RUN wget https://github.com/opencv/opencv/archive/${VERSION}.zip; \
    unzip ${VERSION}.zip; \
    rm ${VERSION}.zip; \
    mv opencv-${VERSION} /opt/opencv; \
    cd /opt/opencv; \
    mkdir build; \
    cd build; \
    cmake   -D CMAKE_BUILD_TYPE=RELEASE \
	        -D CMAKE_INSTALL_PREFIX=/usr/local \
            -D WITH_QT=ON \
            -D WITH_CUDA=OFF \
            -D WITH_OPENGL=ON \
            -D ENABLE_AVX=ON \
            -D WITH_OPENCL=ON \
            -D WITH_IPP=ON \
            -D WITH_EIGEN=ON \
            -D BUILD_TESTS=OFF \
            -D BUILD_PERF_TESTS=OFF \
            -D WITH_V4L=ON \
            -D FORCE_VTK=ON \
            -D WITH_TBB=ON \
            -D WITH_GDAL=ON \
            -D WITH_XINE=ON \
            -D BUILD_TIFF=ON \
            -D BUILD_opencv_java=OFF \
            -D BUILD_EXAMPLES=ON \
            -D INSTALL_PYTHON_EXAMPLES=ON \
            -D INSTALL_C_EXAMPLES=OFF \
            -D OPENCV_ENABLE_NONFREE=ON \
            -D OPENCV_EXTRA_MODULES_PATH=/opt/opencv_contrib/modules \
            -D ENABLE_PRECOMPILED_HEADERS=OFF ..; \
    make -j4; \
    make install; \
    ldconfig

#            -D OPENCV_PYTHON3_INSTALL_PATH=/opt/opencv-python-examples \
# cp /opt/opencv/build/lib/python3/cv2.cpython-36m-x86_64-linux-gnu.so /usr/local/lib/python3.6/dist-packages

RUN export PYTHONPATH=$PYTHONPATH:`pwd`:`pwd`/slim

RUN jupyter notebook --generate-config --allow-root; \
    echo "c.NotebookApp.password = u'sha1:6a3f528eec40:6e896b6e4828f525a6e20e5411cd1c8075d68619'" >> /root/.jupyter/jupyter_notebook_config.py

EXPOSE 8888

ADD [ "bootstrap.sh", "/"]

CMD [ "/bin/bash", "/bootstrap.sh" ]